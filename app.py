import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from dotenv import load_dotenv
import os
import json
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ–∫–µ–Ω –∏ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
API_TOKEN = os.getenv('BOT_TOKEN')
OWNER_ID = int(os.getenv('OWNER_TELEGRAM_ID'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –§–∞–π–ª —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
AUTHORIZED_USERS_FILE = 'storage/authorized_users.json'

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_authorized_users():
    if not os.path.exists(AUTHORIZED_USERS_FILE):
        return []
    with open(AUTHORIZED_USERS_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_authorized_users(users):
    with open(AUTHORIZED_USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=4)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    authorized_users = load_authorized_users()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if user_id in [user['id'] for user in authorized_users]:
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ñ–∏–ª–∏–∞–ª.")
        await send_branch_options(message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞
    else:
        await message.reply("üö®–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à—É –§–∞–º–∏–ª–∏—é –∏ –ò–º—è")
        # –û–∂–∏–¥–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è
        await dp.register_message_handler(handle_name, state="*")

# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserForm(StatesGroup):
    name = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ –∏ –∏–º–µ–Ω–∏
async def handle_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.text.strip()
    authorized_users = load_authorized_users()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
    owner = await bot.get_chat(OWNER_ID)
    await bot.send_message(OWNER_ID, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç: {user_name} ({user_id})")
    
    # –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç—É–ø
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ"), types.KeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å‚ùå"))
    
    await bot.send_message(OWNER_ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É", reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    authorized_users.append({
        'id': user_id,
        'name': user_name,
        'status': 'pending'
    })
    save_authorized_users(authorized_users)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
@dp.message_handler(lambda message: message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ')
async def confirm_access(message: types.Message):
    user_id = message.from_user.id
    authorized_users = load_authorized_users()
    for user in authorized_users:
        if user['status'] == 'pending':
            user['status'] = 'approved'
            save_authorized_users(authorized_users)
            await bot.send_message(user_id, "–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º!üòâ")
            await bot.send_message(OWNER_ID, f"–î–æ—Å—Ç—É–ø –¥–ª—è {user['name']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
            await send_branch_options(message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
@dp.message_handler(lambda message: message.text == '–û—Ç–∫–ª–æ–Ω–∏—Ç—å‚ùå')
async def deny_access(message: types.Message):
    user_id = message.from_user.id
    authorized_users = load_authorized_users()
    for user in authorized_users:
        if user['status'] == 'pending':
            user['status'] = 'denied'
            save_authorized_users(authorized_users)
            await bot.send_message(user_id, "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–∫—Ä—ã—Ç!‚õî")
            await bot.send_message(OWNER_ID, f"–î–æ—Å—Ç—É–ø –¥–ª—è {user['name']} –æ—Ç–∫–ª–æ–Ω–µ–Ω!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞
async def send_branch_options(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–§–∏–ª–∏–∞–ª 1"), types.KeyboardButton("–§–∏–ª–∏–∞–ª 2"))
    keyboard.add(types.KeyboardButton("–§–∏–ª–∏–∞–ª 3"))
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:", reply_markup=keyboard)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
